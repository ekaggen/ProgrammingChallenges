/* 	Solution to Programming Challenges Problem	http://www.programming-challenges.com		Author: Eric Kaggen	Problem: The Tourist Guide (110903)		This solution favors readability over elegance. The	assumption is made that program input follows supplied	specifications. Handling of boundary cases outside of the	specifications is omitted. This is meant for fun rather than	practical use. Code style reflects the purpose of the code.*/#include <iostream>#include <vector>#include <string>#include <queue>#include <algorithm>#include <math.h>using namespace std;int main(){	int nCities, nRoads, start, end, passengers;	int conn[100][100];	int nCase = 1;	while(true)	{		cin>>nCities;		cin>>nRoads;		if(nCities == 0)			break;		// Init connectivity matrix		for(int i = 0; i < nCities; i++)			for(int j = 0; j < nCities; j++)				conn[i][j] = 0;			// Build connectivity matrix from input		for(int i = 0; i < nRoads; i++)		{			cin>>start;			cin>>end;			cin>>conn[start-1][end-1];			conn[end-1][start-1] = conn[start-1][end-1];		}		cin>>start;		cin>>end;		cin>>passengers;		// Do Floydâ€“Warshall		for(int k = 0; k < nCities; k++)		{			for(int i = 0; i < nCities; i++)			{				for(int j = 0; j < nCities; j++)				{					conn[i][j] = max(conn[i][j], min(conn[i][k],conn[k][j]));				}			}		}		// Output		cout<<"Scenario #"<<nCase++<<endl;		cout<<"Minimum Number of Trips = ";		cout<<ceil((double)passengers/(double)(conn[start-1][end-1]-1))<<"\n"<<endl;	}	return 0;}