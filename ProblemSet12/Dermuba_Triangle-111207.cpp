/* 	Solution to Programming Challenges Problem	http://www.programming-challenges.com		Author: Eric Kaggen	Problem: Dermuba Triangle (111207)		This solution favors readability over elegance. The	assumption is made that program input follows supplied	specifications. Handling of boundary cases outside of the	specifications is omitted. This is meant for fun rather than	practical use. Code style reflects the purpose of the code.*/#include <math.h>#include <stdio.h>#include <iomanip>#include <iostream>using namespace std;const double distSmall = sqrt(3.0f)/2.0;const double distBig = sqrt(3.0f)/3.0;struct point{	double x, y;	point()	{		x=0;		y=0;	}	point(double x, double y)	{		this->x = x;		this->y = y;	}};// Gets the x,y coordinates given a house numberpoint getCoords(int houseNum){	double x,y;	int row = (int)sqrt((double)houseNum);	x = (houseNum - (row*row) - row)/2.0f;		if(row == 0)	{		y = 0;	}	else if((row + houseNum) % 2 == 0)	{		y = (row - 1)*distSmall + distSmall;	}	else	{		y = (row - 1)*distSmall + distBig;	}		return point(x,y);}int main(){	int n,m;	cout.setf(ios::fixed, ios::floatfield);	cout.setf(ios::showpoint);	while ( scanf ("%d %d", &n, &m) != EOF )	{		// Get the coordiantes of each house		point nPoint = getCoords(n);		point mPoint = getCoords(m);		// Now just get distance		double distance = sqrt((nPoint.x-mPoint.x)*(nPoint.x-mPoint.x)+(nPoint.y-mPoint.y)*(nPoint.y-mPoint.y));		cout<<setprecision(3)<<distance<<endl;	}	return 0;}