/* 	Solution to Programming Challenges Problem	http://www.programming-challenges.com		Author: Eric Kaggen	Problem: Dog and Gopher (111301)		This solution favors readability over elegance. The	assumption is made that program input follows supplied	specifications. Handling of boundary cases outside of the	specifications is omitted. This is meant for fun rather than	practical use. Code style reflects the purpose of the code.*/#include <iostream>#include <vector>#include <algorithm>#include <string>#include <iomanip>#include <math.h>#include <stdio.h>#include <stdlib.h>using namespace std;template<typename T>struct point{	T x, y;	point()	{		x=0;		y=0;	}	point(T a, T b)	{		x = a;		y = b;	}	bool operator == (const point other)	{		return other.x == x && other.y == y;	}	bool operator != (const point other)	{		return other.x != x || other.y != y;	}};template<typename T>bool dogLessThanGopher(point<T> dog, point<T> gopher, point<T> hole){	T left = (hole.x-dog.x)*(hole.x-dog.x)+(hole.y-dog.y)*(hole.y-dog.y);	T right = 4*((hole.x-gopher.x)*(hole.x-gopher.x)+(hole.y-gopher.y)*(hole.y-gopher.y));	return left < right;}int stringToDecimalInt(string s, int decimalPlaces){	size_t decPoint = s.find('.');	int pad = 0;	if(decPoint != string::npos)	{		s=s.substr(0, decPoint+1+decimalPlaces);		pad = decPoint+1+decimalPlaces - s.length();		s.erase(decPoint, 1);	}	else	{		pad = decimalPlaces;	}		for(int i = 0; i < pad; i++) s.append("0");	return atoi(s.c_str());}void decimalIntToString(string* out, int decimalInt, int decimalPlaces){	char buf[40];	if(decimalInt < 0)	{		sprintf(buf, "-%04i", decimalInt*-1);	}	else	{		sprintf(buf, "%04i", decimalInt);	}	out->clear();	out->append(buf);	out->insert(out->length() - decimalPlaces, ".");}int main(){	int n;	string gopherStartInX, gopherStartInY, dogStartInX, dogStartInY;	string tmpX, tmpY;	cout.setf(ios::fixed, ios::floatfield);	cout.setf(ios::showpoint);	while( cin>>n>>gopherStartInX>>gopherStartInY>>dogStartInX>>dogStartInY )    {		bool gopherDies = true; // Gopher starts out dead				// Start positions from input		point<long long> dogStart(stringToDecimalInt(dogStartInX, 3), stringToDecimalInt(dogStartInY, 3));		point<long long> gopherStart(stringToDecimalInt(gopherStartInX, 3), stringToDecimalInt(gopherStartInY, 3));				// Now loop through the input and try to find a viable hole		for(int i = 0; i < n; i++)		{			cin>>tmpX>>tmpY;			point<long long> hole(stringToDecimalInt(tmpX, 3), stringToDecimalInt(tmpY, 3));			if(gopherDies)			{				// Found a hole!				if(!dogLessThanGopher(dogStart, gopherStart, hole))				{					gopherDies = false;					decimalIntToString(&tmpX, hole.x, 3);					decimalIntToString(&tmpY, hole.y, 3);					cout<<"The gopher can escape through the hole at (" << tmpX << "," << tmpY<<")."<<endl;				}			}		}		if(gopherDies)		{			cout<<"The gopher cannot escape."<<endl;		}	}    return 0;}